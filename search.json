[
  {
    "objectID": "danl_proj_nba--1-.html#salary-distribution-among-teams",
    "href": "danl_proj_nba--1-.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba--1-.html#player-age-distribution",
    "href": "danl_proj_nba--1-.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba--1-.html#position-wise-salary-insights",
    "href": "danl_proj_nba--1-.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba--1-.html#top-10-highest-paid-players",
    "href": "danl_proj_nba--1-.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nMusic Blog\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nChristmas Movies\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\n\nFeb 18, 2025\n\n\nJake Nielsen\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jake Nielsen",
    "section": "",
    "text": "Jake Nielsen majors in Mathematics at SUNY Geneseo. Jake is a part of the Geneseo swim team and is a Junior."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Jake Nielsen",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.A. in Mathematics | Aug 2022 - May 2026  Minor in Data analytics"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Jake Nielsen",
    "section": "Experience",
    "text": "Experience\nCurrently enrolled in data analytics, statistics, and mathematics classes"
  },
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/spotify/Music_blog.html",
    "href": "posts/spotify/Music_blog.html",
    "title": "Music Blog",
    "section": "",
    "text": "Write a blog post about your favorite artist(s) in the spotify DataFrame using Jupyter Notebook, and add it to your online blog. In your blog post, utilize counting, sorting, indexing, and filtering methods.\nThis is a spotify DataFrame that has information about playlist information\n\nimport pandas as pd\n\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\nspotify\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198000\n999998\n✝️\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n198001\n999998\n✝️\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n198002\n999998\n✝️\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n198003\n999998\n✝️\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n198004\n999998\n✝️\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n\n198005 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nThis is a really long data frame, lets see how many different songs and playlists are on it.\n\ntracks = spotify['track_name'].nunique()\ntracks\n\n64115\n\n\n\nplaylists = spotify['playlist_name'].nunique()\nplaylists\n\n2184\n\n\nLets see how many times my favorite artist Travis Scott appears on this dataframe\n\ntravis = spotify[spotify['artist_name'] == 'Travis Scott']\ntotal_tracks = len(travis)\ntotal_tracks\n\n437\n\n\nHow many playlists does travis scott appear on?\n\ntravisplaylists = travis['playlist_name'].nunique()\ntravisplaylists\n\n189\n\n\nWhat percentage of playlists contain at least one travis scott song?\n\n(travisplaylists/playlists)*100\n\n8.653846153846153\n\n\nNow, lets make a list of all of travis scotts songs and we will sort them by album and song title alphabetically\n\ntravislist = travis[['album_name','track_name']]\ntravis_list = travislist.sort_values(['album_name','track_name'], ascending = [True, True]).drop_duplicates()\ntravis_list\n\n\n  \n    \n\n\n\n\n\n\nalbum_name\ntrack_name\n\n\n\n\n5611\nA-Team\nA-Team\n\n\n12450\nBirds In The Trap Sing McKnight\nbeibs in the trap\n\n\n18300\nBirds In The Trap Sing McKnight\ncoordinate\n\n\n4069\nBirds In The Trap Sing McKnight\nfirst take\n\n\n536\nBirds In The Trap Sing McKnight\ngoosebumps\n\n\n27686\nBirds In The Trap Sing McKnight\nguidance\n\n\n64621\nBirds In The Trap Sing McKnight\nlose\n\n\n41408\nBirds In The Trap Sing McKnight\noutside\n\n\n64663\nBirds In The Trap Sing McKnight\nsdp interlude\n\n\n119107\nBirds In The Trap Sing McKnight\nsweet sweet\n\n\n41406\nBirds In The Trap Sing McKnight\nthe ends\n\n\n25749\nBirds In The Trap Sing McKnight\nthrough the late night\n\n\n64665\nBirds In The Trap Sing McKnight\nway back\n\n\n1406\nBirds In The Trap Sing McKnight\nwonderful\n\n\n564\nButterfly Effect\nButterfly Effect\n\n\n113750\nDon't Play\nDon't Play\n\n\n37164\nMamacita\nMamacita\n\n\n14709\nRodeo\n3500\n\n\n14710\nRodeo\n90210\n\n\n5576\nRodeo\nAntidote\n\n\n86313\nRodeo\nApple Pie\n\n\n143735\nRodeo\nI Can Tell\n\n\n143733\nRodeo\nNever Catch Me\n\n\n61191\nRodeo\nNightcrawler\n\n\n27687\nRodeo\nOh My Dis Side\n\n\n14702\nRodeo\nPiss On Your Grave\n\n\n119134\nRodeo\nPornography\n\n\n172582\nRodeo\nWasted\n\n\n41388\nUpper Echelon\nUpper Echelon\n\n\n132327\nWe Run This, Vol. 13 (Mixed by Mr. E)\nHigh Fashion\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nLets see who the top 10 most popular artists are in this dataframe\n\npopular = spotify\npopular = popular['artist_name'].value_counts()\npopular.head(10)\n\n\n\n\n\n\n\n\ncount\n\n\nartist_name\n\n\n\n\n\nDrake\n2715\n\n\nKanye West\n1065\n\n\nKendrick Lamar\n1035\n\n\nRihanna\n915\n\n\nThe Weeknd\n913\n\n\nFuture\n784\n\n\nEminem\n760\n\n\nLil Uzi Vert\n728\n\n\nEd Sheeran\n719\n\n\nThe Chainsmokers\n642\n\n\n\n\ndtype: int64\n\n\nWhere does Travis Scott rank compared to the the most popular artists\n\npopular = popular.reset_index()\npopular = popular[popular['count'] == total_tracks]\npopular\n\n\n  \n    \n\n\n\n\n\n\nindex\nartist_name\ncount\n\n\n\n\n31\n31\nTravis Scott\n437"
  },
  {
    "objectID": "posts/py-basic/Python_basics.html",
    "href": "posts/py-basic/Python_basics.html",
    "title": "Python Basics",
    "section": "",
    "text": "Tuple = (1,2,3,4,5)\nList = [1,2,3,4,5]\ndictionary = {'a': 1, 'b': 2, 'c': 3}\n\n#built in functions\nlen(List)\nsum(List)\nmax(List)\nmin(List)\n\n#while loops\n\nk=0\nwhile k &lt; 10:\n  k=k+1\n  print(k)\n\nfor i in \"hello\":\n  print(i)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nh\ne\nl\nl\no"
  },
  {
    "objectID": "posts/Christmas-Movie-Blog/Christmas_movies_blog.html",
    "href": "posts/Christmas-Movie-Blog/Christmas_movies_blog.html",
    "title": "Christmas Movies",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movies\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\n\n\n\n\n0\ntt0020356\nmovie\nSailor's Holiday\nsailors holiday\n1929\n58.0\n5.4\n55\n\n\n1\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n242\n\n\n2\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n638\n\n\n3\ntt0021268\nmovie\nHoliday of St. Jorgen\nholiday of st jorgen\n1930\n83.0\n7.4\n256\n\n\n4\ntt0021377\nmovie\nSin Takes a Holiday\nsin takes a holiday\n1930\n81.0\n6.1\n740\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2260\ntt9747440\ntvMovie\nA Christmas Love Story\na christmas love story\n2019\n84.0\n6.9\n1652\n\n\n2261\ntt9747450\ntvMovie\nHoliday for Heroes\nholiday for heroes\n2019\n81.0\n7.0\n1655\n\n\n2262\ntt9802890\ntvMovie\nChristmas Jars\nchristmas jars\n2019\n93.0\n7.3\n914\n\n\n2263\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n725\n\n\n2264\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n926\n\n\n\n\n\n2265 rows × 8 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\nholiday_movie_genres\n\n\n  \n    \n\n\n\n\n\n\ntconst\ngenres\n\n\n\n\n0\ntt0020356\nComedy\n\n\n1\ntt0020823\nDrama\n\n\n2\ntt0020823\nRomance\n\n\n3\ntt0020985\nComedy\n\n\n4\ntt0020985\nDrama\n\n\n...\n...\n...\n\n\n4526\ntt9815084\nFamily\n\n\n4527\ntt9815084\nRomance\n\n\n4528\ntt9892854\nComedy\n\n\n4529\ntt9892854\nDrama\n\n\n4530\ntt9892854\nRomance\n\n\n\n\n\n4531 rows × 2 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nLets see what the lowest rated and the highest rated movies are in this dataframe. (movies with less than 100 votes are filtered out)\n\nlow = holiday_movies\nlow = low[low['num_votes'] &gt;= 100]\nlow = low.sort_values(['average_rating'], ascending=True)\nlow.head(15)\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\n\n\n\n\n1797\ntt4009460\nmovie\nKirk Cameron's Saving Christmas\nkirk camerons saving christmas\n2014\n79.0\n1.3\n16608\n\n\n1272\ntt1651146\ntvMovie\nThe Christmas Tree\nthe christmas tree\n1991\n43.0\n1.4\n854\n\n\n854\ntt1242748\nvideo\nJohnson Family Christmas Dinner\njohnson family christmas dinner\n2008\n88.0\n1.5\n127\n\n\n1610\ntt2578608\nmovie\nKrampus: The Christmas Devil\nkrampus the christmas devil\n2013\n82.0\n1.6\n1963\n\n\n2174\ntt8879926\nmovie\nA Raunchy Christmas Story\na raunchy christmas story\n2018\n72.0\n1.7\n132\n\n\n2100\ntt7784186\nvideo\nThe Christmas Light\nthe christmas light\n1995\n23.0\n1.7\n126\n\n\n2258\ntt9683542\nmovie\nA Karate Christmas Miracle\na karate christmas miracle\n2019\n90.0\n1.8\n177\n\n\n212\ntt0170547\nmovie\nSanta's Christmas Circus\nsantas christmas circus\n1966\n60.0\n2.0\n187\n\n\n1600\ntt2507266\nvideo\nCool Cat in the Hollywood Christmas Parade\ncool cat in the hollywood christmas parade\n2012\n21.0\n2.0\n709\n\n\n1906\ntt5343450\nvideo\nLittle Angels: The Brightest Christmas\nlittle angels the brightest christmas\n2004\n42.0\n2.1\n1045\n\n\n238\ntt0193524\ntvMovie\nThe Star Wars Holiday Special\nthe star wars holiday special\n1978\n97.0\n2.1\n16397\n\n\n816\ntt11702278\nmovie\nA Wrestling Christmas Miracle\na wrestling christmas miracle\n2020\n90.0\n2.2\n154\n\n\n1308\ntt1789982\nvideo\nWe Wish You a Turtle Christmas\nwe wish you a turtle christmas\n1994\n25.0\n2.2\n434\n\n\n520\ntt0491718\ntvMovie\nA Fairy Tale Christmas\na fairy tale christmas\n2005\n47.0\n2.4\n259\n\n\n1003\ntt1348305\nvideo\nDeadly Little Christmas\ndeadly little christmas\n2009\nNaN\n2.4\n179\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nhigh = holiday_movies\nhigh = high[high['num_votes'] &gt;= 100]\nhigh = high.sort_values(['average_rating'], ascending=False)\nhigh.head(15)\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\n\n\n\n\n2240\ntt9351856\nmovie\nHoliday Twist\nholiday twist\n2023\n95.0\n9.0\n720\n\n\n1259\ntt16274720\nmovie\nSave Christmas\nsave christmas\n2022\n90.0\n8.9\n260\n\n\n129\ntt0095416\ntvMovie\nJulie Andrews: The Sound of Christmas\njulie andrews the sound of christmas\n1987\n48.0\n8.9\n125\n\n\n1023\ntt13637436\ntvMovie\nOld Vic: In Camera - A Christmas Carol\nold vic in camera a christmas carol\n2020\nNaN\n8.6\n152\n\n\n636\ntt10220226\nvideo\nThat '70s Show: Holiday Edition\nthat 70s show holiday edition\n2011\n220.0\n8.4\n130\n\n\n385\ntt0331217\ntvMovie\nChristmas Eve on Sesame Street\nchristmas eve on sesame street\n1978\n60.0\n8.4\n1052\n\n\n1983\ntt6339052\ntvMovie\nJoe Pera Helps You Find the Perfect Christmas ...\njoe pera helps you find the perfect christmas ...\n2016\n23.0\n8.3\n154\n\n\n305\ntt0263206\nvideo\nChristmas in South Park\nchristmas in south park\n2000\n100.0\n8.3\n4400\n\n\n849\ntt1232802\ntvMovie\nA Tudor Feast at Christmas\na tudor feast at christmas\n2006\n59.0\n8.3\n178\n\n\n65\ntt0059026\ntvMovie\nA Charlie Brown Christmas\na charlie brown christmas\n1965\n25.0\n8.3\n42101\n\n\n73\ntt0067209\ntvMovie\nThe Homecoming: A Christmas Story\nthe homecoming a christmas story\n1971\n100.0\n8.3\n2039\n\n\n111\ntt0087548\ntvMovie\nKenny & Dolly: A Christmas to Remember\nkenny dolly a christmas to remember\n1984\n60.0\n8.3\n139\n\n\n68\ntt0060345\ntvMovie\nHow the Grinch Stole Christmas!\nhow the grinch stole christmas\n1966\n26.0\n8.3\n56692\n\n\n87\ntt0075988\ntvMovie\nEmmet Otter's Jug-Band Christmas\nemmet otters jugband christmas\n1977\n48.0\n8.2\n4460\n\n\n266\ntt0228332\ntvMovie\nTrans-Siberian Orchestra: The Ghosts of Christ...\ntranssiberian orchestra the ghosts of christma...\n1999\n46.0\n8.2\n533\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\nLets see which movies have the most votes (most popular).\n\nvotes = holiday_movies\nvotes = votes.sort_values(['num_votes'], ascending = False)\nvotes.head(10)\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\n\n\n\n\n151\ntt0107688\nmovie\nThe Nightmare Before Christmas\nthe nightmare before christmas\n1993\n76.0\n7.9\n367288\n\n\n501\ntt0457939\nmovie\nThe Holiday\nthe holiday\n2006\n136.0\n6.9\n308807\n\n\n211\ntt0170016\nmovie\nHow the Grinch Stole Christmas\nhow the grinch stole christmas\n2000\n104.0\n6.3\n276568\n\n\n135\ntt0097958\nmovie\nNational Lampoon's Christmas Vacation\nnational lampoons christmas vacation\n1989\n97.0\n7.5\n209533\n\n\n107\ntt0085334\nmovie\nA Christmas Story\na christmas story\n1983\n93.0\n7.9\n163273\n\n\n48\ntt0046250\nmovie\nRoman Holiday\nroman holiday\n1953\n118.0\n8.0\n145289\n\n\n499\ntt0453451\nmovie\nMr. Bean's Holiday\nmr beans holiday\n2007\n90.0\n6.4\n132186\n\n\n680\ntt1067106\nmovie\nA Christmas Carol\na christmas carol\n2009\n96.0\n6.8\n125562\n\n\n2151\ntt8623904\nmovie\nLast Christmas\nlast christmas\n2019\n103.0\n6.5\n86058\n\n\n1288\ntt1711525\nmovie\nOffice Christmas Party\noffice christmas party\n2016\n105.0\n5.9\n85255\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\nLets join the genre datafrarme in to see which genre is the nmost popular.\n\njoineddf = pd.merge(holiday_movies, holiday_movie_genres, on='tconst', how='inner')\njoineddf\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\ngenres\n\n\n\n\n0\ntt0020356\nmovie\nSailor's Holiday\nsailors holiday\n1929\n58.0\n5.4\n55\nComedy\n\n\n1\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n242\nDrama\n\n\n2\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n242\nRomance\n\n\n3\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n638\nComedy\n\n\n4\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n638\nDrama\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4526\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n725\nFamily\n\n\n4527\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n725\nRomance\n\n\n4528\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n926\nComedy\n\n\n4529\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n926\nDrama\n\n\n4530\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n926\nRomance\n\n\n\n\n\n4531 rows × 9 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\ntopgenres = joineddf\ntopgenres = topgenres[['genres','primary_title']]\ntopgenres = topgenres['genres'].value_counts().reset_index()\ntopgenres.head(15)\n\n\n  \n    \n\n\n\n\n\n\ngenres\ncount\n\n\n\n\n0\nComedy\n1025\n\n\n1\nDrama\n828\n\n\n2\nRomance\n737\n\n\n3\nFamily\n707\n\n\n4\nAnimation\n268\n\n\n5\nFantasy\n185\n\n\n6\nAdventure\n117\n\n\n7\nDocumentary\n101\n\n\n8\nShort\n96\n\n\n9\nMusic\n91\n\n\n10\nMusical\n78\n\n\n11\nHorror\n63\n\n\n12\nCrime\n44\n\n\n13\nMystery\n37\n\n\n14\nThriller\n32\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\nLets see the stats about one of my favorite christmas movies\n\nmymovie = joineddf\nmymovie.set_index('simple_title', inplace=True)\nmymovie.loc['national lampoons christmas vacation']\n\nKeyError: \"None of ['simple_title'] are in the columns\""
  },
  {
    "objectID": "danl-210-python-basic.html",
    "href": "danl-210-python-basic.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "danl-210-python-basic.html#what-is-python",
    "href": "danl-210-python-basic.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "danl-210-python-basic.html#variables-and-data-types",
    "href": "danl-210-python-basic.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "danl-210-python-basic.html#control-structures",
    "href": "danl-210-python-basic.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "danl-210-python-basic.html#functions",
    "href": "danl-210-python-basic.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "danl-210-python-basic.html#lists-and-dictionaries",
    "href": "danl-210-python-basic.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  }
]